#!/usr/bin/env python2
# -*- coding: UTF-8 -*-

import os, sys
import json
import time
from datetime import datetime

import warnings
warnings.filterwarnings("ignore")

import numpy as np
from scipy import sparse
from scipy.sparse import linalg
from scikits import umfpack
import durationpy



def absorb_time(P, x, y):
    if x == y:
        return 0.0
    P = P.copy()
    for s in xrange(P.shape[0]):
        P[y,s] = 0
    P[y,y] = 1
    new_order = list(range(P.shape[0]))
    new_order.remove(y)
    new_order.append(y)
    P = P[:, new_order][new_order]
    if x > y:
        x -= 1
    #print P
    Q = P[0:P.shape[0]-1,0:P.shape[0]-1]
    return _absorb_time(Q, x)

def _absorb_time(Q, x):
    I = sparse.eye(Q.shape[0], format=Q.format)
    N = inverse(I - Q)
    c = np.ones((N.shape[0], 1))
    return N.dot(c)[x][0]

def inverse(A):
    # return linalg.inv(A)
    I = sparse.eye(A.shape[0], format=A.format)

    #lu = linalg.spilu(A)
    lu = umfpack.splu(A)
    #print >>sys.stderr, "LU",
    return lusolve(lu, I)

    # return linalg.spsolve(A, I)

def lusolve(lu, B):
    if B.shape[0] < 30000:
        X = sparse.csc_matrix(lu.solve(B))
    else:
        # print >>sys.stderr, ("total cols: %d" % B.shape[1])
        cols = list()
        for j in xrange(B.shape[1]):
            # if j % 10 == 0:
            #     print >>sys.stderr, ("X_%d" % j),
            col = lu.solve(B[:,j])
            cols.append(sparse.csc_matrix(col))
        X = sparse.hstack(cols)
    # print >>sys.stderr, ""
    return X


def main(args):
    node_id = None
    if len(args) > 0:
        try:
            node_id = int(args[0])
        except:
            pass
    d = json.load(sys.stdin)
    start = d['Start']
    states = d['States']
    transitions = sparse.lil_matrix(d['Transitions'], dtype=np.float32)
    enable_print = node_id is not None and node_id == 1 and transitions.shape[0] > 250
    times = dict()
    log_freq = int(float(len(states))*.25)
    if enable_print:
        print >>sys.stderr, "starting hitting time computation. P: {}, states: {}, log_freq: {}".format(
            transitions.shape, len(states),
            log_freq,
        )
    total_time = None
    for i, state in enumerate(states):
        s = datetime.utcnow()
        times[state] = absorb_time(transitions, start, state)
        e = datetime.utcnow()
        if total_time is None:
            total_time = e - s
        else:
            total_time += e - s
        do_print = i == 0
        do_print = do_print or i + 1 >= len(states)
        do_print = do_print or (log_freq > 0 and i%log_freq == 0)
        if enable_print and do_print:
            print >>sys.stderr, "computed {}/{}: {} in {} avg {}".format(
                i+1, len(states), times[state],
                durationpy.to_str(e - s, True),
                durationpy.to_str(total_time/(i+1), True),
            )
    json.dump(times, sys.stdout)

if __name__ == "__main__":
    main(sys.argv[1:])
